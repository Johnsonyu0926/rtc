#ifndef _HIK_APA_COMMON_H_
#define _HIK_APA_COMMON_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _HRESULT_DEFINED
#define _HRESULT_DEFINED
typedef unsigned int HRESULT;
#endif

#define HIK_APA_LIB_S_OK 1
#define HIK_APA_LIB_S_FAIL 0
#define HIK_APA_LIB_E_MEM_OUT 0x81F00001
#define HIK_APA_LIB_E_PTR_NULL 0x81F00002
#define HIK_APA_LIB_KEY_PARAM_ERR 0x81F00003
#define HIK_APA_LIB_PARAM_VAL_ERR 0x81F00004
#define HIK_APA_LIB_E_BITS_PER_SAMP_ERR 0x81F00005
#define HIK_APA_LIB_E_CHANNEL_ERR 0x81F00006
#define HIK_APA_LIB_E_SAMPLERATE_ERR 0x81F00007
#define HIK_APA_LIB_E_INPUT_SIZE_ERR 0x81F00008
#define HIK_APA_LIB_E_MEMTAB_SIZE_ERR 0x81F00009
#define HIK_APA_LIB_E_AUDIO_UNSUPPORT 0x81F0000a
#define HIK_APA_LIB_E_ERRCODE_UNSUPPORT 0x81F0000b
#define HIK_APA_LIB_E_UNKNOW 0x81FFFFFF

#define APA_ENUM_END 0x0FFFFF
#define APA_MAX_PARAM_NUM 50
#define APA_MAX_CHN_N 64

typedef enum _APA_MEM_ALIGNMENT_ {
    APA_MEM_ALIGN_4BYTE = 4,
    APA_MEM_ALIGN_8BYTE = 8,
    APA_MEM_ALIGN_16BYTE = 16,
    APA_MEM_ALIGN_32BYTE = 32,
    APA_MEM_ALIGN_64BYTE = 64,
    APA_MEM_ALIGN_128BYTE = 128,
    APA_MEM_ALIGN_256BYTE = 256,
    APA_MEM_ALIGN_END = APA_ENUM_END
} APA_MEM_ALIGNMENT;

typedef enum _APA_MEM_ATTRS_ {
    APA_MEM_SCRATCH,
    APA_MEM_PERSIST,
    APA_MEM_ATTRS_END = APA_ENUM_END
} APA_MEM_ATTRS;

typedef enum _APA_MEM_PLAT_ {
    APA_MEM_PLAT_CPU,
    APA_MEM_PLAT_GPU,
    APA_MEM_PLAT_END = APA_ENUM_END
} APA_MEM_PLAT;

typedef enum _APA_MEM_SPACE_ {
    APA_MEM_EXTERNAL_PROG,
    APA_MEM_INTERNAL_PROG,
    APA_MEM_EXTERNAL_TILERED_DATA,
    APA_MEM_EXTERNAL_CACHED_DATA,
    APA_MEM_EXTERNAL_UNCACHED_DATA,
    APA_MEM_INTERNAL_DATA,
    APA_MEM_EXTERNAL_TILERED8,
    APA_MEM_EXTERNAL_TILERED16,
    APA_MEM_EXTERNAL_TILERED32,
    APA_MEM_EXTERNAL_TILEREDPAGE,
    APA_MEM_EXTERNAL_END = APA_ENUM_END
} APA_MEM_SPACE;

typedef struct _APA_MEM_TAB_ {
    unsigned int size;
    APA_MEM_ALIGNMENT alignment;
    APA_MEM_SPACE space;
    APA_MEM_ATTRS attrs;
    void *base;
    APA_MEM_PLAT plat;
} APA_MEM_TAB;

typedef struct _APA_AUDIO_INFO_ {
    unsigned int channel_num;
    unsigned int sample_rate;
    unsigned int bits_per_sample;
    unsigned int data_len;
    int reserved[4];
} APA_AUDIO_INFO;

typedef enum _APA_SET_CFG_TYPE_ {
    APA_SET_CFG_SINGLE_PARAM = 0x0001,
    APA_SET_CFG_PARAM_LIST = 0x0002,
    APA_SET_CFG_DEFAULT_PARAM = 0x0003,
    APA_SET_CFG_RESTART_LIB = 0x0004,
    APA_SET_CFG_END = APA_ENUM_END
} APA_SET_CFG_TYPE;

typedef enum _APA_GET_CFG_TYPE_ {
    APA_GET_CFG_SINGLE_PARAM = 0x0001,
    APA_GET_CFG_PARAM_LIST = 0x0002,
    APA_GET_CFG_DEFAULT_PARAM = 0x0003,
    APA_GET_CFG_VERSION = 0x0004,
    APA_GET_CFG_END = APA_ENUM_END
} APA_GET_CFG_TYPE;

typedef struct _APA_KEY_PARAM_ {
    int index;
    int value;
} APA_KEY_PARAM;

typedef struct _APA_KEY_PARAM_LIST_ {
    unsigned int param_num;
    APA_KEY_PARAM param[APA_MAX_PARAM_NUM];
} APA_KEY_PARAM_LIST;

#ifdef __cplusplus
}
#endif

#endif // _HIK_APA_COMMON_H_
